# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc e044a8e4790042363cd31495277fe077b28843bc6ca4ad090cfd3863525e7df9 # shrinks to packet = PublicSubkey(PubKeyInner { packet_version: Old, version: V2, algorithm: RSA, created_at: 1970-01-01T00:00:00Z, expiration: None, public_params: Elgamal { p: Mpi(), g: Mpi(), y: Mpi(8af6879059bb1d7911de) } })
cc b9ca470b625ccbddb905b802f24c3934e1c9242e552d828ec620d7502b775786 # shrinks to packet = PublicSubkey(PubKeyInner { packet_version: Old, version: V2, algorithm: RSA, created_at: 1970-01-01T00:00:00Z, expiration: None, public_params: Elgamal { p: Mpi(af8e1079b1c0a1), g: Mpi(2492620d6812ddd1d0a17a50b616), y: Mpi(aa1e1817231e901fd8316ff5d936de2ba5c355af42b5490f4c43957020320aacef09f1d55d04e6cc42ff20e0cdeb3596c6660ef2600ca10bc8b78ed09b553d87ae6ab218981acee249a8c6650c42acdb2e247426) } })
cc 4bdf2e65cc9a158f20f6e145c9eccc8b75238bcf142fd1c850359cc80b4a644b # shrinks to packet = PublicKey(PubKeyInner { packet_version: Old, version: V2, algorithm: RSA, created_at: 1970-01-01T00:00:00Z, expiration: None, public_params: RSA { n: Mpi(), e: Mpi() } })
cc 57ae1069b7155ca9b3a98191c0674eb6020e3780f10f9af58a6f3249d031fa97 # shrinks to packet = PublicKey(PubKeyInner { packet_version: Old, version: Other(0), algorithm: RSA, created_at: 1970-01-01T00:00:00Z, expiration: None, public_params: RSA { n: Mpi(), e: Mpi() } })
cc 2a29de62e73361ed1b54c2754db22be2dddbf28b6852460486c58605a6f3294d # shrinks to packet = PublicSubkey(PubKeyInner { packet_version: New, version: V4, algorithm: ECDSA, created_at: 2104-12-02T16:50:42Z, expiration: None, public_params: ECDSA(P256 { key: PublicKey { point: AffinePoint { x: FieldElement(0x713785BDDE221873195703803ACB6AC111CB926BC56BC355F66FC5DE4790FC01), y: FieldElement(0x1F6F7BA1CA8B97014DD1A2A0E6B9D45D1E8B6EC91399AC553F2E9A2E658FA7A3), infinity: 0 } }, p: Mpi(249ace552ce32f623ffde73857b606f423fc3b913f673ad6e2e3d6c75f3a51f9a5b15ea1537cfd8a84) }) })
cc 94493bf0d7751a26908c92baee282b07144df81dd0fca09d80c751369cc4f350 # shrinks to packet = PublicKey(PubKeyInner { packet_version: Old, version: V4, algorithm: ECDSA, created_at: 2012-02-14T18:03:49Z, expiration: None, public_params: ECDSA(P256 { key: PublicKey { point: AffinePoint { x: FieldElement(0x713785BDDE221873195703803ACB6AC111CB926BC56BC355F66FC5DE4790FC01), y: FieldElement(0x1F6F7BA1CA8B97014DD1A2A0E6B9D45D1E8B6EC91399AC553F2E9A2E658FA7A3), infinity: 0 } }, p: Mpi(00) }) })
cc 17aa46e7fd6784b59ed0ffe2ea7a90a3e4e35a86a17d323a7ce4bafc42c495c0 # shrinks to packet = PublicKey(PubKeyInner { packet_version: New, version: V4, algorithm: ECDH, created_at: 2023-01-08T01:54:36Z, expiration: None, public_params: ECDH(Known { curve: Ed25519, p: Mpi(01), hash: None, alg_sym: Plaintext }) })
cc d25b93a62f76a3077f5a96e203cb0fac7974932a284929480b508c02b8b79ab9 # shrinks to packet = PublicKey(PubKeyInner { packet_version: Old, version: V4, algorithm: EdDSALegacy, created_at: 2060-03-10T09:52:29Z, expiration: None, public_params: EdDSALegacy(Unsupported { curve: Ed25519, mpi: Mpi(01) }) })
